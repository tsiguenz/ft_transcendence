// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GameType {
  LADDER
  CUSTOM
}

model User {
  id              String       @id @default(uuid())
  fortyTwoId      Int?         @unique
  nickname        String       @unique
  ladderPoints    Int          @default(0)
  avatarPath      String       @default("/default.jpeg")
  twoFactorEnable Boolean      @default(false)
  twoFactorSecret String?
  hash            String?
  gamesWin        Game[]       @relation("winner")
  gamesLoose      Game[]       @relation("looser")
  messages        Message[]    @relation("author")
  chatrooms       ChatRoomUser[]
  friends         Friend[]     @relation("user")
  createdAt       DateTime     @default(now())
  TwoFactorId     TwoFactorId?

  @@map("users")
}

model TwoFactorId {
  id   String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("two_factor_ids")
}

model Game {
  id                   String   @id @default(uuid())
  type                 GameType
  winnerId             String
  winner               User     @relation("winner", fields: [winnerId], references: [id])
  looserId             String
  looser               User     @relation("looser", fields: [looserId], references: [id])
  previousWinnerRating Int
  previousLooserRating Int
  winnerScore          Int      @default(0)
  looserScore          Int      @default(0)
  duration             DateTime
  createdAt            DateTime @default(now())

  @@map("games")
}

model Message {
  id        String      @id @default(uuid())
  content   String
  authorId  String
  author    User     @relation("author", fields: [authorId], references: [id], onDelete: Cascade)
  chatRoomId String
  chatRoom  ChatRoom @relation("chatRoom", fields: [chatRoomId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("messages")
}

model ChatRoomUser {
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  chatRoom    ChatRoom  @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId  String
  role        Role      @default(USER)

  createdAt DateTime    @default(now())
  @@id([userId, chatRoomId], name: "chatrooms_users_pkey")
  @@map("chatrooms_users")
}

model ChatRoom {
  id        String      @id @default(uuid())
  name      String      @db.VarChar(255) @unique
  slug      String      @db.VarChar(255) @unique
  messages  Message[]   @relation("chatRoom")
  users     ChatRoomUser[]
  type      RoomType    @default(PUBLIC)
  hash      String?     
  createdAt DateTime    @default(now())

  @@map("chatrooms")
}

model Friend {
  userId          String
  user            User  @relation("user", fields: [userId], references: [id], onDelete: Cascade)
  friendId        String

  @@id([userId, friendId], name: "friend_pkey")
  @@map("friends")
}

enum Role {
  OWNER
  ADMIN
  USER
}

enum RoomType {
  PRIVATE
  PROTECTED
  PUBLIC
}

