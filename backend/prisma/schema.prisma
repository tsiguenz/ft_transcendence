// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GameType {
  LADDER
  CUSTOM
}

model User {
  id              Int          @id @default(autoincrement())
  fortyTwoId      Int?         @unique
  nickname        String       @unique
  ladderPoints    Int          @default(0)
  avatar          Bytes?
  twoFactorEnable Boolean      @default(false)
  twoFactorSecret String?
  hash            String?
  gamesWin        Game[]       @relation("winner")
  gamesLoose      Game[]       @relation("looser")
  messages        Message[]    @relation("author")
  friends         Friend[]     @relation("initiator")
  createdAt       DateTime     @default(now())
  TwoFactorId     TwoFactorId?

  @@map("users")
}

model TwoFactorId {
  uuid   String @id @default(uuid())
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("two_factor_ids")
}

model Game {
  id                   Int      @id @default(autoincrement())
  type                 GameType
  winnerId             Int
  winner               User     @relation("winner", fields: [winnerId], references: [id])
  looserId             Int
  looser               User     @relation("looser", fields: [looserId], references: [id])
  previousWinnerRating Int
  previousLooserRating Int
  winnerScore          Int      @default(0)
  looserScore          Int      @default(0)
  duration             DateTime
  createdAt            DateTime @default(now())

  @@map("games")
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  authorId  Int
  author    User     @relation("author", fields: [authorId], references: [id], onDelete: Cascade)
  // chatRoomId Int
  //  chatRoom  ChatRoom @relation(fields: [chatRoomId], references: [id])
  createdAt DateTime @default(now())

  @@map("messages")
}

model Friend {
  id            Int   @id @default(autoincrement())
  initiatorId   Int
  initiatorUser User  @relation("initiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  friend        String

  @@map("friends")
}
